Full Stack Developer Task Assignment 
Task Title 
Build a Mini Event Booking System 
Objective 
Create a simplified Event Booking Web Application where users can browse events and 
book available slots. The app must demonstrate scalable backend architecture, efficient 
database interactions, UI responsiveness, proper caching, and strong error handling. 
Tech Stack 
Frontend: React.js 
Backend: Node.js (Express.js) 
Database: PostgreSQL 
Caching: Redis 
ORM: Prisma or Knex.js + Objection.js 
Features to Implement 
1. User Management - Signup/Login with email & password - Passwords must be hashed - JWT-based authentication - Return clear error messages for invalid login, duplicate registration, etc. 
2. Event Management - Admin can create/edit/delete events - Fields: title, description, location, date, total_slots, image, tags - Users can browse events with search (by title/tag) and pagination - Users can book an event (only once per event) 
3. Booking Logic - Booking should decrement available slots - Cannot book if slots are full (show proper error message) - Redis caching for available slots (update/invalidate on booking) - Prevent race conditions (you may use optimistic locking/cache sync) 
4. Dashboards - Admin Dashboard: View bookings per event - User Dashboard: View personal bookings 
Technical Requirements - Use Prisma or Knex.js + Objection for DB models and migrations - Use Redis to cache available slots - Expose clean, versioned RESTful APIs - Implement comprehensive error handling: 
• Catch and return meaningful error messages 
• Handle DB constraint errors, validation errors, auth errors, 404s, etc. 
• Use centralized error middleware in Express - Implement frontend error displays (toast/snackbar/inline) - Validate inputs at both frontend and backend 
Frontend Guidelines - Built in React.js - Pages: 
• Login / Signup 
• Event List (Search + Pagination) 
• Book Event 
• My Bookings 
• Admin Panel (Add/Edit Event, View Bookings) - Use Axios or Fetch - Clean UI (Material UI, Tailwind, or Bootstrap allowed) - Display API errors appropriately 
Bonus (Optional) - Real-time available slot updates (WebSocket or polling) - Export bookings to CSV (admin) - Deployment on Render / Railway / Vercel (not mandatory) 
Time Limit - Recommended Time: 8 hours - Submission Deadline: [19th July 2025] - Share: 
• GitHub repo with instructions 
• Postman collection / API docs 
• DB Schema (SQL/Prisma) 
• Live deployment (optional) 
Evaluation Criteria 
Code Quality            
API Design              - Clean structure, reusable code, modular design - RESTful, secure, well-documented 
Database & Caching      - Proper usage of joins, indexes, Redis caching 
Error Handling          - Backend try-catch, centralized error middleware, frontend error 
feedback 
Security                
UI/UX                   - JWT auth, hashed passwords, protected routes - Functional and intuitive UI 
Completion & Clarity    - Meets requirements and is well documented 

Core Vertical Slice First (Most Recommended for 8 Hours)

Focus: Get a single, essential end-to-end feature working, then expand. This ensures you have something demonstrable quickly.

Steps:

Setup: Basic project structure (monorepo or separate frontend/backend folders), install core dependencies (Express, React, Prisma/Knex, Redis client). Basic DB schema for User and Event.

Backend - Minimal Auth & Event Creation:

Implement user signup and login (hashed passwords, JWT).

Implement admin-only event creation (simple endpoint, no complex validation yet).

Frontend - Minimal Auth & Event Creation:

Basic signup/login forms.

Basic event creation form (admin only).

Simple event list display (no search/pagination yet).

Backend & Frontend - Booking:

Implement booking logic (decrement slots).

Basic Redis caching for available slots.

Frontend button to book an event.

Expand & Refine:

Add remaining features: event edit/delete, search/pagination, dashboards.

Implement robust error handling (centralized middleware, frontend display).

Add input validation (frontend and backend).

Address race conditions for booking.

Polish UI (with Material UI, Tailwind, or Bootstrap).

Write API documentation (Postman).